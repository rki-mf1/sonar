# ---------------------------------------------
#
# *** This file is for environment variables that are needed by the docker
# compose files themselves!! For environment values needed within containers,
# use the ./conf/*.yml files or the environment: directive ***
#
# Details:
#
# The project uses two types of environment files that are subtly different:
#
# 1) .env (a renamed and probably customized copy of template.env)
#
# Variables defined in this file are available to be used within the docker
# compse files themselves, and will be read in regardless of which docker
# compose yml file you are using (dev, prod or GH action). You can use them to
# define volume mappings, ports, etc.
#
# 2) The something.env files in conf/ (e.g. ./conf/dev_db.env)
#
# These are read in using the env_file: directive within each service
# definition are available only within the container itself (*not* in the
# compose file). So you can't define things in the env_file and then use those
# settings to set up things like volumes or ports. They tend to be specific to
# either production, dev or action compose files.
#
# --------------- Sonar backend ---------------
# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG=TRUE

# Path to directories inside the sonar container
SONAR_DATA_ENTRY_FOLDER="/sonar/data/import"
SONAR_DATA_PROCESSING_FOLDER="/sonar/data/processing"
SONAR_DATA_ARCHIVE="/sonar/data/archive"
LOG_PATH="/logs"

# Path to directories outside the sonar container
EXTERNAL_SONAR_DATA_ENTRY_FOLDER="./work/django/data/import"
EXTERNAL_SONAR_DATA_PROCESSING_FOLDER="./work/django/data/import"
EXTERNAL_SONAR_DATA_ARCHIVE="./work/django/data/archive"
EXTERNAL_SONAR_LOGS=./work/django/logs
EXTERNAL_SONAR_INPUT_LOGS=./work/django/input-logs

LOG_LEVEL="DEBUG"

# --------------- For docker compose (.prod.yml) ---------------

## postgres
EXTERNAL_POSTGRES_DATA="./work/postgres/data"
POSTGRES_CONFIG_FILE="conf/customPostgresql.conf"
# Default for the postgres docker image is root (uid=0). Change this to the
# user you want to run postgres as. Typically your own user:
# $ id -u
# 1000
# $ id -g
# 1000
# Then you'd use:
#POSTGRES_UID_GID="1000:1000"
POSTGRES_UID_GID="0"
POSTGRES_PORT=5432

## redis

## celery
SAMPLE_BATCH_SIZE=20


