services:
  # Needed to run postgres as a non-root user. This runs as root and sets the
  # postgres data directory to be owned by the non-root user that will run
  # postgres.
  sonar-db-init:
    image: postgres:alpine
    container_name: sonar-db-init
    environment:
    - POSTGRES_DB
    - POSTGRES_SCHEMA
    - POSTGRES_USER
    - POSTGRES_PASSWORD
    - POSTGRES_HOST
    - POSTGRES_PORT
    volumes:
      - ${POSTGRES_DATA_EXTERNAL}:/var/lib/postgresql/data
    entrypoint: /bin/sh -c
    command: [ "chown -R ${POSTGRES_UID_GID} /var/lib/postgresql/data" ]

  sonar-db:
    image: postgres:alpine
    container_name: sonar-db
    restart: unless-stopped
    user: "${POSTGRES_UID_GID}"
    command: -c config_file=/etc/postgresql/postgresql.conf
    volumes:
      # Have to check that the configuration is actually loaded. Right now, I'm following the same approach as the official PostgreSQL Docker
      - ./conf/customPostgresql.conf:/etc/postgresql/postgresql.conf
      - './conf/initdb/:/docker-entrypoint-initdb.d/'
      # This exact path inside the container needs to be mapped to a volume,
      # otherwise it will automatically be mapped to a volume inside of the
      # host's /var/lib/docker/volumes directory
      - ${POSTGRES_DATA_EXTERNAL}:/var/lib/postgresql/data
    environment:
    - POSTGRES_DB
    - POSTGRES_SCHEMA
    - POSTGRES_USER
    - POSTGRES_PASSWORD
    - POSTGRES_HOST
    - POSTGRES_PORT
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    depends_on:
      sonar-db-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  sonar-django-backend:
    image: backend:local # hint: must be built before, use "build_docker_dev.ps1"
    container_name: sonar-django-backend
    environment:
      - DEBUG
      - REDIS_URL
      - SAMPLE_BATCH_SIZE
      - LOG_PATH
      - LOG_LEVEL
      - LDAP_DJANGO_QUERY_USER
      - LDAP_DJANGO_QUERY_PASSWORD
      - POSTGRES_HOST
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_PORT
      - ALLOWED_HOSTS
      - SONAR_DATA_ENTRY_FOLDER
      - SONAR_DATA_PROCESSING_FOLDER
      - SONAR_DATA_ARCHIVE
      - SECRET_KEY
    restart: unless-stopped
    #command: gunicorn  --workers 2 --threads 2 --bind 0.0.0.0:9080 covsonar_backend.wsgi:application --timeout 300
    entrypoint: /bin/sh -c
    command: [ "${START_DJANGO_SERVER}" ]
    # enable this and "django_extensions" in settings.dev to enable per request profiling
    # also create the ./profiler directory in project root
    # command: python manage.py runprofileserver --use-cprofile --prof-path=/code/profiler 0.0.0.0:9080
    volumes:
      - ./covsonar2_server/test/media:/covsonarmedia
      - ./covsonar2_server/test/static:/staticfiles
      - ${SONAR_EXTERNAL}/logs:${LOG_PATH}
      - ${SONAR_EXTERNAL}/input-logs:/input-logs
      - ${SONAR_EXTERNAL}/data:${SONAR_DATA_FOLDER}
      - ${SONAR_EXTERNAL}/coverage:/code/coverage 
    depends_on:
      sonar-cache:
        condition: service_started
      sonar-db:
        condition: service_healthy
    ports:
      # to access directly, normally can use localhost:8000 via the nginx proxy
      - "9080"

  sonar-django-apscheduler:
    image: backend:local # hint: must be built before, use "build_docker_dev.ps1"
    container_name: sonar-django-apscheduler
    environment:
      - DEBUG
      - REDIS_URL
      - SAMPLE_BATCH_SIZE
      - LOG_PATH
      - LOG_LEVEL
      - LDAP_DJANGO_QUERY_USER
      - LDAP_DJANGO_QUERY_PASSWORD
      - POSTGRES_HOST
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_PORT
      - ALLOWED_HOSTS
      - SONAR_DATA_ENTRY_FOLDER
      - SONAR_DATA_PROCESSING_FOLDER
      - SONAR_DATA_ARCHIVE
      - SECRET_KEY
    restart: on-failure
    entrypoint: /bin/sh -c
    command: [ "python manage.py runapscheduler" ]
    volumes:
      - ${SONAR_EXTERNAL}/data:${SONAR_DATA_FOLDER}
    depends_on:
      sonar-db:
        condition: service_healthy
      sonar-django-backend:
        condition: service_started

  backend-nginx:
    container_name: backend-nginx
    build:
      context: ./nginx
    volumes:
      - ./nginx/covsonar.conf:/etc/nginx/conf.d/default.conf
      - ./covsonar2_server/test/static:/staticfiles
      - ./covsonar2_server/test/media:/mediafiles
    ports:
      - "8000:8000"
    depends_on:
      - sonar-django-backend

  sonar-cache:
    image: redis:7
    container_name: sonar-cache
    restart: unless-stopped
    ports:
      - "6379"

  celery-workers:
    container_name: celery-workers
    image: backend:local
    # The workers (concurrency, autoscale) are affected by the SAMPLE_BATCH_SIZE parameter in backend. For example, 
    # if the concurrency is set too high and the SAMPLE_BATCH_SIZE is too high,
    # this will not speed up the process. You need to lower SAMPLE_BATCH_SIZE into smaller chunks to gain the benefits
    # --autoscale max, min  means will have at least min and at most max concurrent worker subprocesses for a given worker instance.
    # command: celery -A covsonar_backend worker --loglevel DEBUG -Ofair  --autoscale=5,0 -E --max-tasks-per-child 15 --time-limit 180
    # --concurrency=N means will have exactly N worker subprocesses for your worker instance (meaning the worker instance can handle N conccurent tasks).
    command: celery -A covsonar_backend worker --loglevel ${LOG_LEVEL} -Ofair  --concurrency=4 -E --max-tasks-per-child 8 --time-limit 600 -n Bob
    volumes:
      - ${SONAR_EXTERNAL}/data:${SONAR_DATA_FOLDER}
    environment:
      - DEBUG
      - REDIS_URL
      - SAMPLE_BATCH_SIZE
      - LOG_PATH
      - LOG_LEVEL
      - LDAP_DJANGO_QUERY_USER
      - LDAP_DJANGO_QUERY_PASSWORD
      - POSTGRES_HOST
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_PORT
      - ALLOWED_HOSTS
      - SONAR_DATA_ENTRY_FOLDER
      - SONAR_DATA_PROCESSING_FOLDER
      - SONAR_DATA_ARCHIVE
      - SONAR_DATA_ENTRY_FOLDER
      - SONAR_DATA_PROCESSING_FOLDER
      - SONAR_DATA_ARCHIVE
      - SECRET_KEY
    depends_on:
      - sonar-cache
      - sonar-django-backend
      
  celery-monitor:
    container_name: celery-monitor
    image: backend:local
    command: celery -A covsonar_backend flower --port=5555 --basic_auth="$CELERY_FLOWER_AUTH" --enable_events=False
    environment:
      - DEBUG
      - REDIS_URL
      - SAMPLE_BATCH_SIZE
      - LOG_PATH
      - LOG_LEVEL
      - LDAP_DJANGO_QUERY_USER
      - LDAP_DJANGO_QUERY_PASSWORD
      - POSTGRES_HOST
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_PORT
      - ALLOWED_HOSTS
      - SONAR_DATA_ENTRY_FOLDER
      - SONAR_DATA_PROCESSING_FOLDER
      - SONAR_DATA_ARCHIVE
      - SONAR_DATA_ENTRY_FOLDER
      - SONAR_DATA_PROCESSING_FOLDER
      - SONAR_DATA_ARCHIVE
      - SECRET_KEY
    ports:
      - "5555:5555"
    depends_on:
      - sonar-cache
      - sonar-django-backend
      - celery-workers
