# SECURITY WARNING: don't run with debug turned on in production!
# Default this to FALSE, and set it to TRUE in dev env file
DEBUG=FALSE

# Path to directories inside the sonar container
SONAR_DATA_FOLDER="/sonar/data"
SONAR_DATA_ENTRY_FOLDER="/sonar/data/import"
SONAR_DATA_PROCESSING_FOLDER="/sonar/data/processing"
SONAR_DATA_ARCHIVE="/sonar/data/archive"
LOG_PATH="/logs"

# Path to directories outside the sonar container
SONAR_EXTERNAL=./work/sonar

LOG_LEVEL=DEBUG

## postgres
POSTGRES_DB=covsonar
POSTGRES_SCHEMA=public
POSTGRES_USER=postgres
POSTGRES_HOST=sonar-db
POSTGRES_PORT=5432
POSTGRES_DATA_EXTERNAL=./work/postgres/data
POSTGRES_CONFIG_FILE=./conf/customPostgresql.conf
POSTGRES_INIT_DB=./conf/initdb/
# Default for the postgres docker image is root (uid=0). Change this to the
# user you want to run postgres as. Typically your own user:
# $ id -u
# 1000
# $ id -g
# 1000
# Then you'd use:
#POSTGRES_UID_GID="1000:1000"
POSTGRES_UID_GID="0"
POSTGRES_PORT=5432

## redis
REDIS_URL=redis://sonar-cache:6379/

## celery
SAMPLE_BATCH_SIZE=20

# Docker images. Use digests to fix specific images and avoid unexpected
# changes. You can find the digest of a runnin container using:
# $ docker images --digest
# Otherwise you can find them on dockerhub
# postgres:alpine
DOCKER_POSTGRES_IMAGE=postgres@sha256:492898505cb45f9835acc327e98711eaa9298ed804e0bb36f29e08394229550d
# redis:7
DOCKER_REDIS_IMAGE=redis@sha256:878983f8f5045b28384fc300268cec62bca3b14d5e1a448bec21f28cfcc7bf78
# nginx:mainline-alpine3.20-slim
DOCKER_NGINX_IMAGE=nginx@sha256:15d20a9e80b094bc7fea73c8207bac1d2196d02251df24c6bbc58b19af1b4fd5
