"""
Django settings for covsonar_backend project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import environ
from pathlib import Path
import os


# Initialise environment variables

env = environ.Env(
    DEBUG=(bool, False),
    POSTGRES_USER=str,
    POSTGRES_PASSWORD=str,
    POSTGRES_DB=str,
    POSTGRES_HOST=str,
    POSTGRES_PORT=str,
    SECRET_KEY=str,
    SONAR_DATA_ENTRY_FOLDER=(str, None),
    SONAR_DATA_PROCESSING_FOLDER=(str, None),
    SONAR_DATA_ARCHIVE=(str, None),
    REDIS_URL=(str, None),
    ALLOWED_HOSTS=(str, None),
    SAMPLE_BATCH_SIZE=(int, 10),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

PROJECT_ROOT = os.path.normpath(os.path.dirname(__file__))

STATIC_ROOT = os.path.join(PROJECT_ROOT, "static")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
# DEBUG = True

ALLOWED_HOSTS = env("ALLOWED_HOSTS", "").split(",")

# Application definition

INSTALLED_APPS = [
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "environ",
    "rest_api.apps.RestApiConfig",
    "rest_framework",
    "django_filters",
    "django_apscheduler",
]
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
}
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
ROOT_URLCONF = "covsonar_backend.urls"
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
]
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "covsonar_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# NOTE: The `env.db()` method is an alias for `db_url()`.
# We can use the code like `if not env.db()`.
# However, we need to set the `DATABASE_URL` in the environment; otherwise,
# we will get a message like the one below:
# UserWarning: Engine not recognized from the URL: {'NAME': '', 'USER': '', 'PASSWORD': '', 'HOST': '', 'PORT': '', 'ENGINE': ''}
# As of now, we just ignore the UserWarning message and still set it as a dictionary
# by using `env("DATABASE_URL")` this way.
if not os.environ.get("DATABASE_URL"):
    print("Using the default database.")
    database_connection = {
        "ENGINE": "django.db.backends.postgresql",
        "OPTIONS": {"options": "-c search_path=public"},
        "NAME": env("POSTGRES_DB"),
        "USER": env("POSTGRES_USER"),
        "PASSWORD": env("POSTGRES_PASSWORD"),
        "HOST": "postgres",
        "PORT": env("POSTGRES_PORT"),
    }
else:
    print("Using the provided database.")
    database_connection = env.db("DATABASE_URL")

DATABASES = {"default": database_connection}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


DATA_UPLOAD_MAX_MEMORY_SIZE = None

APSCHEDULER_RUN_NOW_TIMEOUT = 60 * 60 * 5

# SONAR APP
REDIS_URL=env("REDIS_URL")

SAMPLE_BATCH_SIZE=env("SAMPLE_BATCH_SIZE")


SONAR_DATA_ENTRY_FOLDER = (
    env("SONAR_DATA_ENTRY_FOLDER")
    if env("SONAR_DATA_ENTRY_FOLDER")
    else os.path.join(BASE_DIR, "import_data")
)
SONAR_DATA_PROCESSING_FOLDER = (
    env("SONAR_DATA_PROCESSING_FOLDER")
    if env("SONAR_DATA_PROCESSING_FOLDER")
    else os.path.join(BASE_DIR, "processing_data")
)
SONAR_DATA_ARCHIVE = (
    env("SONAR_DATA_ARCHIVE")
    if env("SONAR_DATA_ARCHIVE")
    else os.path.join(BASE_DIR, "archive_data")
)

# Check if the directory already exists
if not os.path.exists(SONAR_DATA_ENTRY_FOLDER):
    os.makedirs(SONAR_DATA_ENTRY_FOLDER)
if not os.path.exists(SONAR_DATA_PROCESSING_FOLDER):
    os.makedirs(SONAR_DATA_PROCESSING_FOLDER)
if not os.path.exists(SONAR_DATA_ARCHIVE):
    os.makedirs(SONAR_DATA_ARCHIVE)

# ------------------------------------------
    

PERMISSION_RELEVANT_USER_GROUPS = ["admin", "read_only"]

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{env('REDIS_URL')}1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# Celery settings
CELERY_BROKER_URL = f"{env('REDIS_URL')}0"
CELERY_RESULT_BACKEND = f"{env('REDIS_URL')}0"

if DEBUG:
    INTERNAL_IPS = ("127.0.0.1",)
    INSTALLED_APPS += ["debug_toolbar"]
    MIDDLEWARE.insert(5, "debug_toolbar.middleware.DebugToolbarMiddleware")
    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": lambda request: True,
    }
